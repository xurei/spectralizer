name: nightly
on:
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.ini'
  push:
    paths-ignore:
      - '**.md'
      - '**.ini'
    branches:
    - master
    tags:
    - "v*"
env:
  PLUGIN_NAME: spectralizer
  OBS_VERSION: 28.1.2
jobs:
#  macos64:
#    name: "macOS 64-bit"
#    runs-on: [macos-latest]
#    env:
#      QT_VERSION: 5.14.1
#      MACOS_DEPS_VERSION: '2020-08-30'
#      project-git: spectralizer
#      project-name: spectralizer
#    steps:
#      - name: Checkout plugin
#        uses: actions/checkout@v2
#        with:
#          path: ${{ github.workspace }}
#          submodules: 'recursive'
#      - name: 'Get ${{ env.project-git }} git info'
#        shell: bash
#        working-directory: ${{ github.workspace }}
#        run: |
#          git fetch --prune --unshallow
#          echo "GIT_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
#          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
#          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
#      - name: Cache OBS build
#        id: cache-obs-build-macos
#        uses: actions/cache@v1
#        with:
#          path: obs-studio
#          key: obs-deps-macos
#      - name: 'Restore pre-built dependencies from cache'
#        id: deps-cache
#        uses: actions/cache@v1
#        env:
#          CACHE_NAME: 'deps-cache'
#        with:
#          path: /tmp/obsdeps
#          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.MACOS_DEPS_VERSION }}
#      - name: 'Restore pre-built Qt dependency from cache'
#        id: deps-qt-cache
#        uses: actions/cache@v1
#        env:
#          CACHE_NAME: 'deps-qt-cache'
#        with:
#          path: /tmp/obsdeps
#          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.MACOS_DEPS_VERSION }}
#      - name: 'Install prerequisite: Pre-built dependencies'
#        if: steps.deps-cache.outputs.cache-hit != 'true'
#        shell: bash
#        run: |
#          curl -L -O https://github.com/obsproject/obs-deps/releases/download/${{ env.MACOS_DEPS_VERSION }}/macos-deps-${{ env.MACOS_DEPS_VERSION }}.tar.gz
#          tar -xf ./macos-deps-${{ env.MACOS_DEPS_VERSION }}.tar.gz -C "/tmp"
#      - name: 'Install prerequisite: Pre-built dependency Qt'
#        if: steps.deps-qt-cache.outputs.cache-hit != 'true'
#        shell: bash
#        run: |
#          curl -L -O https://github.com/obsproject/obs-deps/releases/download/${{ env.MACOS_DEPS_VERSION }}/macos-qt-${{ env.QT_VERSION }}-${{ env.MACOS_DEPS_VERSION }}.tar.gz
#          tar -xf ./macos-qt-${{ env.QT_VERSION }}-${{ env.MACOS_DEPS_VERSION }}.tar.gz -C "/tmp"
#          xattr -r -d com.apple.quarantine /tmp/obsdeps
#      - name: Checkout OBS
#        if: steps.cache-obs-build-macos.outputs.cache-hit != 'true'
#        uses: actions/checkout@v2
#        with:
#          repository: obsproject/obs-studio
#          submodules: 'recursive'
#          path: obs-studio
#      - name: 'Fetch prune'
#        if: steps.cache-obs-build-macos.outputs.cache-hit != 'true'
#        run: git fetch --prune
#      - name: 'Get OBS-Studio git info'
#        shell: bash
#        working-directory: ${{ github.workspace }}/obs-studio
#        run: |
#          echo "OBS_GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
#          echo "OBS_GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
#          echo "OBS_GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
#      - name: Configure and build OBS
#        if: steps.cache-obs-build-macos.outputs.cache-hit != 'true'
#        shell: bash
#        run: |
#          cd ${{ github.workspace }}/obs-studio
#          git checkout ${{ env.OBS_GIT_TAG }}
#          mkdir build && cd build
#          echo "=> Building obs-studio.."
#
#          cmake .. -DCMAKE_OSX_DEPLOYMENT_TARGET=10.11 -DQTDIR="/tmp/obsdeps" -DBUILD_BROWSER="OFF" -DDepsPath="/tmp/obsdeps" \
#            -DBUILD_CAPTIONS=OFF -DDISABLE_PLUGINS=true -DENABLE_SCRIPTING=0
#          make -j4
#      - name: Configure and build plugin
#        shell: bash
#        run: |
#          brew install fftw
#          cd ${{ github.workspace }}
#          echo "=> Building plugin for macOS."
#          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
#          mkdir -p build && cd build
#          cmake .. \
#            -DQTDIR=/tmp/obsdeps \
#            -DBUILD_BROWSER="OFF" \
#            -DLIBOBS_INCLUDE_DIR=${{ github.workspace }}/obs-studio/libobs \
#            -DLIBOBS_LIB=${{ github.workspace }}/obs-studio/build/libobs/libobs.dylib \
#            -DOBS_FRONTEND_LIB:STRING="${{ github.workspace }}/obs-studio/build/UI/obs-frontend-api/libobs-frontend-api.dylib" \
#            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
#            -DCMAKE_INSTALL_PREFIX=/usr \
#          && make -j4
#      - name: 'Install prerequisite: Packages app'
#        if: success()
#        shell: bash
#        run: |
#          curl -L -O http://s.sudre.free.fr/Software/files/Packages.dmg
#          sudo hdiutil attach Packages.dmg
#          sudo installer -pkg "/Volumes/Packages 1.2.9/packages/Packages.pkg" -target /
#          sudo hdiutil detach "/Volumes/Packages 1.2.9"
#      - name: Package
#        working-directory: ${{ github.workspace }}
#        if: success()
#        shell: bash
#        run: |
#          echo "=> Modifying ${{ env.project-name }}.so"
#          install_name_tool \
#          -change /tmp/obsdeps/lib/QtWidgets.framework/Versions/5/QtWidgets \
#            @executable_path/../Frameworks/QtWidgets.framework/Versions/5/QtWidgets \
#          -change /tmp/obsdeps/lib/QtGui.framework/Versions/5/QtGui \
#            @executable_path/../Frameworks/QtGui.framework/Versions/5/QtGui \
#          -change /tmp/obsdeps/lib/QtCore.framework/Versions/5/QtCore \
#            @executable_path/../Frameworks/QtCore.framework/Versions/5/QtCore \
#          ./build/lib${{ env.project-name }}.so
#          otool -L ./build/lib${{ env.project-name }}.so
#          packagesbuild ./package/installer-macOS.pkgproj
#          mv ./package/build/*.pkg ./package/${{ env.project-name }}.${{ env.GIT_TAG }}.macos.pkg
#      - name: Publish
#        if: success()
#        uses: actions/upload-artifact@v2-preview
#        with:
#          name: '${{ env.project-name }}.${{ env.GIT_TAG }}.installer.macos'
#          path: ./package/*.pkg
  build-linux:
    name: 'Linux 64bit'
    runs-on: ubuntu-latest
    env:
      obs-studio-version: 26.0.2
      project-name: spectralizer
      project-git: spectralizer
      maintainer: uni@vrsal.cf
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: ${{ github.workspace }}
        submodules: 'recursive'
    - name: 'Get ${{ env.project-git }} git info'
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        git fetch --prune --unshallow
        echo "GIT_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
        echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
    - name: Cache Dependencies
      id: cache-linux-deps
      uses: actions/cache@v1
      with:
        path: obs-studio
        key: obs-deps-${{ env.obs-studio-ref }}-linux
    - name: Install dependencies
      if: steps.cache-linux-deps.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -ex

        sudo add-apt-repository -y ppa:obsproject/obs-studio
        sudo apt-get -qq update

        sudo apt-get install -y \
          libc-dev-bin \
          libc6-dev git \
          build-essential \
          checkinstall \
          libcurl4-openssl-dev \
          cmake \
          obs-studio \
          qtbase5-dev \
          libfftw3-dev \
          libfftw3-bin \
          libfftw3-3
        sudo wget -O /usr/include/obs/obs-frontend-api.h https://raw.githubusercontent.com/obsproject/obs-studio/25.0.0/UI/obs-frontend-api/obs-frontend-api.h
        sudo ldconfig
    - name: Build plugin
      shell: bash
      run: |
        cmake -S ${{github.workspace}} -B ${{github.workspace}}/build/ \-G "Unix Makefiles" \
          -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/dist -DOBS_FRONTEND_INCLUDE=/usr/include/obs
        cmake --build ${{github.workspace}}/build/ --parallel 4 --target install
    - name: Compile deb installer
      shell: bash
      run: | # Now only build deb installer
          cmake ${{github.workspace}} -B ${{github.workspace}}/build \
            -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_VERBOSE_MAKEFILE=true \
            -DOBS_FRONTEND_INCLUDE=/usr/include/obs -DGLOBAL_INSTALLATION=ON
          sudo cmake --build ${{github.workspace}}/build \
            --parallel 4 \
            --target install
          cd ${{github.workspace}}
          export GIT_HASH=$(git rev-parse --short HEAD)
          export GIT_TAG=$(git describe --tags --abbrev=0)
          export PKG_VERSION="1-$GIT_TAG-$GIT_HASH-git"

          [[ "$GITHUB_REF" =~ "^refs/tags/" ]] && export PKG_VERSION="$BRANCH_SHORT_NAME"
          cd ${{github.workspace}}/build
          echo "Packaging version ${PKG_VERSION}"
          PAGER="cat" sudo checkinstall -y --type=debian --fstrans=no --nodoc \
            --backup=no --deldoc=yes --install=no \
            --pkgname=${{ env.project-name }} --pkgversion="$PKG_VERSION" \
            --pkglicense="GPLv2.0" --maintainer="${{ env.maintainer }}" \
            --pkggroup="video" \
            --pkgsource="https://github.com/${{ env.project-git }}" \
            --requires="obs-studio \(\>= ${{ env.obs-studio-version }}\), libfftw3-3 \(\>= 3.3.4\)" \
            --pakdir="../package"
          mv ../package/*.deb ../package/${{ env.project-name }}.${{ env.GIT_TAG }}.linux.x64.deb
    - name: Publish Linux binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.project-name }}.${{ env.GIT_TAG }}.bin.linux.x64
        path: ${{github.workspace}}/dist/**/*
    - name: Publish Linux installer
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.project-name }}.${{ env.GIT_TAG }}.installer.linux.x64
        path: ${{github.workspace}}/package/*.deb
  windows-build:
    name: 'Windows Build'
    runs-on: [windows-latest]
    strategy:
      fail-fast: true
      matrix:
        target:
          - x64
#          - x86
        include:
          - target: x64
            cmake_build: 'x64'
            deps_ext: '64'
#          - target: x86
#            cmake_build: 'Win32'
#            deps_ext: '32'
    env:
      QT_VERSION: '6.3.1'
      CMAKE_GENERATOR: "Visual Studio 17 2022"
      CMAKE_SYSTEM_VERSION: "10.0.18363.657"
      WINDOWS_DEPS_VERSION: '2022-08-02'
    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1.3
      - name: Checkout obs
        uses: actions/checkout@v3.1.0
        with:
          repository: obsproject/obs-studio
          ref: ${{ env.OBS_VERSION }}
          submodules: 'recursive'
      - name: Checkout plugin
        uses: actions/checkout@v3.1.0
        with:
          path: plugins/${{ env.PLUGIN_NAME}}
          submodules: 'recursive'
      - name: Add plugin to obs cmake
        shell: cmd
        run: echo add_subdirectory(${{ env.PLUGIN_NAME }}) >> plugins/CMakeLists.txt
      - name: Remove un-needed plugins for this build
        shell: pwsh
        run: |
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(aja\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(decklink\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(image-source\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(obs-ffmpeg\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(obs-filters\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(obs-libfdk\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(obs-outputs\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(obs-qsv11\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(obs-transitions\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(obs-vst\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(obs-x264\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(rtmp-services\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(text-freetype2\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(vlc-video\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(win-capture\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(win-dshow\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(win-ivcam\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(win-mf\)' -NotMatch)
          Set-Content -Path "plugins\CMakeLists.txt" -Value (get-content -Path "plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(win-wasapi\)' -NotMatch)
          type plugins\CMakeLists.txt
          echo "------------------------------------------------------------------------------------"
          Set-Content -Path "UI\frontend-plugins\CMakeLists.txt" -Value (get-content -Path "UI\frontend-plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(aja-output-ui\)' -NotMatch)
          Set-Content -Path "UI\frontend-plugins\CMakeLists.txt" -Value (get-content -Path "UI\frontend-plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(decklink-output-ui\)' -NotMatch)
          Set-Content -Path "UI\frontend-plugins\CMakeLists.txt" -Value (get-content -Path "UI\frontend-plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(frontend-tools\)' -NotMatch)
          Set-Content -Path "UI\frontend-plugins\CMakeLists.txt" -Value (get-content -Path "UI\frontend-plugins\CMakeLists.txt" | Select-String -Pattern 'add_subdirectory\(decklink-captions\)' -NotMatch)
          type UI\frontend-plugins\CMakeLists.txt
      - name: Fetch Git Tags
        run: git fetch --prune --tags --unshallow
      - name: 'Install prerequisite: QT'
        run: |
          curl -kLO https://github.com/obsproject/obs-deps/releases/download/${{ env.WINDOWS_DEPS_VERSION }}/windows-deps-qt6-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -f --retry 5 -C -
          7z x windows-deps-qt6-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -o"${{ github.workspace }}/cmbuild/deps"
      - name: 'Install prerequisite: Pre-built dependencies'
        run: |
          curl -kLO https://github.com/obsproject/obs-deps/releases/download/${{ env.WINDOWS_DEPS_VERSION }}/windows-deps-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -f --retry 5 -C -
          7z x windows-deps-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -o"${{ github.workspace }}/cmbuild/deps"
      - name: Configure
        shell: bash
        run: |
          mkdir ./package
          mkdir ./installer
          mkdir ./installer/media
          cmake -S . -B "${{ github.workspace }}/build/obs-studio" \
          -G"${{ env.CMAKE_GENERATOR }}" \
          -DCMAKE_PREFIX_PATH:PATH="${{ github.workspace }}/cmbuild/deps" \
          -A"${{ matrix.cmake_build }}" \
          -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" \
          -DBUILD_BROWSER=false \
          -DBUILD_VST=false \
          -DBUILD_VIRTUALCAM=false \
          -DBUILD_CAPTIONS=false \
          -DCOMPILE_D3D12_HOOK=false \
          -DENABLE_SCRIPTING=false \
          -DDepsPath="${{ github.workspace }}/cmbuild/deps" \
          -DDepsPath${{ matrix.deps_ext }}="${{ github.workspace }}/cmbuild/deps" \
          -DQTDIR="${{ github.workspace }}/cmbuild/deps/qt6" \
          -DCOPIED_DEPENDENCIES=FALSE \
          -DCOPY_DEPENDENCIES=TRUE \
          -DENABLE_PLUGINS=TRUE \
          -DDISABLE_PLUGINS=FALSE \
          -DENABLE_BROWSER=FALSE \
          -DENABLE_WEBSOCKET=FALSE \
          -DZLIB_INCLUDE="${{ github.workspace }}/build/zlib/distrib/include" \
          -DZLIB_LIBRARY="${{ github.workspace }}/build/zlib/distrib/lib/zlibstatic.lib" \
          -DLIBZIP_INCLUDE="${{ github.workspace }}/build/libzip/distrib/include" \
          -DLIBZIP_INCLUDE_CONF="${{ github.workspace }}/build/libzip/distrib/include" \
          -DLIBZIP_LIBRARY="${{ github.workspace }}/build/libzip/distrib/lib/zip.lib"

      - name: 'Build'
        run: msbuild /m /p:Configuration=RelWithDebInfo .\build\obs-studio\obs-studio.sln
      - name: Package
        if: success()
        run: |
          $env:FILE_NAME="${{ env.PLUGIN_NAME }}-${{ github.sha }}-windows-${{ matrix.target }}"
          echo "FILE_NAME=${env:FILE_NAME}" >> ${env:GITHUB_ENV}
          robocopy .\build\obs-studio\rundir\RelWithDebInfo\obs-plugins\${{ matrix.deps_ext }}bit\ .\package\obs-plugins\${{ matrix.deps_ext }}bit ${{ env.PLUGIN_NAME }}.* /E /XF .gitignore
          robocopy .\build\obs-studio\rundir\RelWithDebInfo\data\obs-plugins\${{ env.PLUGIN_NAME }}\ .\package\data\obs-plugins\${{ env.PLUGIN_NAME }}\ /E /XF .gitignore
          copy .\build\obs-studio\plugins\${{ env.PLUGIN_NAME }}\installer.iss .\installer\installer.iss
          robocopy .\plugins\${{ env.PLUGIN_NAME}}\media\ .\installer\media\ /E /XF .gitignore
          exit 0
      - name: Publish zip
        if: success()
        uses: actions/upload-artifact@v3.1.1
        with:
          name: '${{ env.FILE_NAME }}'
          path: package/*
#      - name: Publish zip 2
#        if: failure()
#        uses: actions/upload-artifact@v3.1.1
#        with:
#          name: '${{ env.FILE_NAME }}-debug-files'
#          path: build/*
